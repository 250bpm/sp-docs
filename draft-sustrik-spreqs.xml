<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" docName="draft-sustrik-spreqs-01" ipr="full3978">

  <front>

    <title abbrev="SP Requirements">
    Scalability Layer/Protocol Requirements
    </title>

    <author fullname="Martin Sustrik" initials="M." role="editor"
            surname="Sustrik">
      <address>
        <postal>
          <street>Stropkovska 9</street>
          <code>82103</code>
          <city>Bratislava</city>
          <country>Slovakia</country>
        </postal>
        <phone>+421 908 714 885</phone>
        <email>sustrik@250bpm.com</email>
      </address>
    </author>

    <date month="April" year="2011" />

    <area>Applications</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>distributed computing</keyword>
    <keyword>scalability</keyword>

    <abstract>
      <t>This memo argues that a simple layer aimed at scalability is needed
      in the Internet stack and lists the requirements for such a layer.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <t>Distributed computing have been around for a long time. There
      is a wide range of solutions ranging from HPC to enterprise
      messaging. However, the landscape is changing. In the recent
      years, thanks both to dropping prices of hardware and to the
      advance of cloud computing, the access to distributed computing
      infrastructure became commonplace and affordable for everyone.
      Along with this development, the model of software-as-a-service is
      gaining traction, which means that the applications are not
      monolithic anymore, but delegate part of their functionality
      to other applications that live on the network. Thus, mostly
      unnoticed, complex distributed systems emerge.</t>

      <t>This memo argues that old paradigm of complex,
      management-intensive and costly "distributed computing for the
      rich" does not apply any more. In the world where a single
      freelance developer can easily hire a large cluster of boxes for
      what is basically pennies the old-school system of distributed
      computing infrastructure that takes weeks to set up and a
      dedicated team of administrators to run is not appropriate
      anymore.</t>

      <t>What's needed is a simple lightweight network layer for
      distributed computing that runs as smoothly and effortlessly as
      TCP and scales well enough not to break in the world where
      distributed computing is a norm rather than an exception.</t>
    </section>

    <section title="Requirements">
    <t>The distributed computing infrastructure proposed should meet
    the following requirements:

      <list style="letters">

        <t>It should be part of the network stack.
        <vspace blankLines="1" />
        Placing it anywhere else (stand-alone application, new OS
        service, web service, etc.) raises the entry barrier above
        the acceptable level.</t>

        <t>It should be standardised.
        <vspace blankLines="1" />
        The very nature of distributed computing calls for
        standardisation. The system should work between different
        operating systems, programming languages, microarchitectures,
        across geographical and organisational boundaries etc.</t>

        <t>It should scale effortlessly.
        <vspace blankLines="1" />
        With advent of distributed computing over the Internet (SaaS and
        alike) the traditional LAN-sized scalability is insufficient.
        Design of the system should guarantee that it won't break as
        number of participants grows and topologies extend accross network
        and organisational boundaries.</t>

        <t>It should be capable of down-scaling.
        <vspace blankLines="1" />
        The system should scale down to the topology as simple as two
        nodes communicating each with another. There should be no
        mandatory middle nodes (servers, brokers). Obligatory middle
        node raises the entry barrier in terms of both complexity and
        cost to the unacceptable level. However, it should be possible
        to add middle nodes to the topology at any time to scale it up
        to the desired size. In other words, end-to-end principle should
        be observed.</t>

        <t>It should duplicate no functionality.
        <vspace blankLines="1" />
        As a fully integrated part of the network stack, the system
        should provide no services that are available from other layers
        of the stack. While the requirement sounds self-evident, the
        duplication problem is extremely severe with some
        distributed computing solutions and thus the requirement should
        be explicitly spelled out.</t>

        <t>It should work with different L4 protocols.
        <vspace blankLines="1" />
        To address the needs of different industries, the system should
        run on top of different L4 protocols: TCP (generic), SCTP
        (telecom), UDP (gaming), reliable multicast (financial services)
        etc.</t>

        <t>It should be abstracted to a functional level.
        <vspace blankLines="1" />
        The entities handled by the system should reflect the function within
        the application architecture rather than lower-layer addressing schemes.
        They should be "invoice processing service" or "NASDAQ stock quote feed"
        rather than "192.168.0.111:5672" or "this LAN".</t>

        <t>It should be lower layer aware.
        <vspace blankLines="1" />
        The functional view as described above should be explicitly mapped to
        lower layer network entities. That would make it possible to
        mechanically determine the function of the data on the network layer and
        thus allow for things like reporting packet volumes by function,
        traffic shaping by function, and perhaps even firewall requirements
        between functions.</t>

        <t>The governance should be decentralised.
        <vspace blankLines="1" />
        One of the goals is to use the system for communication between
        organisations. Given that few organisations are willing to cede the
        governance of their infrastructure to someone else, the governance model
        should be decentralised by design. Each party should govern its portion
        of the topology with no party having power over the topology as
        a whole.</t>

        <t>It should integrate with existing distributed computing
        solutions.
        <vspace blankLines="1" />
        There is no lack of solutions and protocols for distributed
        computing out there. None of them, unfortunately, meets the
        requirements above (the end-to-end requirement seems to be the
        most significant obstacle). To fully leverage the work already
        done in the area as well as the existing deployment base
        mappings from the proposed system to the individual deployed
        protocols/solutions should be defined, at least as far as it
        is possible.
        <vspace blankLines="1" />
        Two additional sub-requirements are:</t>

        <t>The mapping should not require any change to existing
        implementations/protocols. Rather it should define how to bridge
        it to the system proposed in this memo.</t>

        <t>Using the mappings, the system should be capable of joining
        heterogenous solutions/protocols into large scale topologies
        even though said solutions/protocols themselves may not provide
        mutual interoperability and/or unlimited scalability.</t>

      </list>
    </t>
    </section>

    <section title="Background">
    <t>These requirements are result of work on
    <eref target="www.zeromq.org">0MQ project</eref> as well as of
    ongoing work on
    <eref target="https://github.com/sustrik/linux-2.6/tree/sp-v2.6.36">
    Linux kernel implementation of scalability layer</eref>.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This memo proposes a system for communication between multiple
      endpoints. Thus, it does not map naturally to connection-based security
      mechanisms that assume exactly two endpoints. Care should be taken to
      explain how security mechanisms offered by underlying layers can be
      leveraged in such a system and/or provide a guidelines for building
      security solutions on top of it.</t>
    </section>

  </middle>

</rfc>

