


Internet Engineering Task Force                          M. Sustrik, Ed.
Internet-Draft                                           August 17, 2011
Intended status: Informational
Expires: February 18, 2012


                      Scalability Protocol Framing
                       draft-sustrik-spframing-01

Abstract

   This doucment summarises requirements for SP framing and proposes
   concrete framing specifications for several underlying transports.

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 18, 2012.



















Sustrik                 Expires February 18, 2012               [Page 1]

Internet-Draft                 SP Framing                    August 2011


1.  Introduction

   TODO
















































Sustrik                 Expires February 18, 2012               [Page 2]

Internet-Draft                 SP Framing                    August 2011


2.  Requirements

   1.  Unidirectional data transfer

       Transfering data is the basic service required from the framing
       layer.  Framing layer in turn delegates the task to underlying
       transport protocol, such as TCP.  The requirement explicitly asks
       for uni-directional transfer, so that uni-directional L4
       transports, such as UDP or PGM can be used.  The bi-directional
       L4 transports can be interpreted as pairs of uni-directional
       transports.  Also, there's no requirement for the transfer to be
       reliable.  Underlying transport can be unreliable (UDP).  It's
       not framing layer's task to provide reliability on top of
       unreliable transports.

   2.  Message delimitation

       Framing layer should provide messages rather than stream of bytes
       or packets.  Message is an opaque sequence of bytes.  Note that
       if an underlying L4 transport provides message delimitation
       itself (SCTP) there's no need for framing layer to do any
       additional work.

   3.  Message segmentation

       It should be possible to pass arbitrarily long messages.  The
       limit for message size should be at least 2^64 bytes, which in
       any practical regard can be considered to be infinity.  Many L4
       transports handle segmentation themselves (TCP, SCTP) in which
       case there's no need to implement the functionality in SP framing
       layer.  The need for message segmentation is in most cases
       restricted to packet-based underlying transports.

   4.  Message atomicity

       Framing layer should ensure that layers on top get either entire
       message or no message at all.  For example, with multicast-based
       L4 transports, when late joiner joins the feed framing layer
       should take care not to start delivering the trailing part of the
       message currently in flow.











Sustrik                 Expires February 18, 2012               [Page 3]

Internet-Draft                 SP Framing                    August 2011


3.  Additional considerations

   Framing layer should respect the design decisions made in the
   underlying protocol and not try to fix the -- whether real or
   percieved -- problems in the protocol.

   For example, PGM doesn't allow for batching multiple messages (APDUs)
   into a single packet (TPDU).  While requiring a separate packet for
   each message may seem to be inefficient, especially in the case of
   rapid flow of small messages, SP framing layer should not try to
   compensate for PGM deficiency and provide the batching support
   layered on top of PGM.

   However, when framing layer implements a feature that does not exist
   on the layer of the underlying transport (for example, when message
   segmentation is implemented on top of UDP) it should take care to
   choose the most performance-friendly designs -- keep in mind that SP
   is meant to operate in high-performance environments, passing huge
   volumes of data at wire-speed.

   Specifically, the protocol should contain no bloat.  Data
   representations should be minimal (say binary instead of text) to
   minimise bandwidth usage as well as to make the parsing simpler.

   Similarly -- and if at all possible -- data fields should be located
   on fixed offsets in the packets and should be aligned properly to
   make processing of the packets simpler.

   To make the protocol zero-copy friendly, it should take care to
   minimise the amount of copying to be done by the network stack.  In
   practical terms it means that two bytes that should end up one beside
   another in memory should, as far as possible, be adjacent on the
   wire.

   Any fields defined by the framing layer should be placed in the
   beginning of the message or packet so that any associated processing
   can start even before complete message or packet is received.














Sustrik                 Expires February 18, 2012               [Page 4]

Internet-Draft                 SP Framing                    August 2011


4.  Specification

   SP is meant to work on top of multiple underlying transports, thus
   there is no single framing layer.  This document specifies framing
   protocols for some common L4 transports, however, the list should be
   considered incomplete and open to additions.

4.1.  TCP

   On top of TCP SP messages are encoded as netstrings.  They consist of
   unsigned 64-bit integer in network byte order, which determines the
   size of the following data.  The opaque data follow directly after
   the size field.

      +------------------+----------------------+
      |  size  (64 bits) |         data         |
      +------------------+----------------------+

   SP/TCP implementations are responsible for ensuring atomicity, i.e.
   for dropping incomplete message when disconnection happens.

   Note that SP/TCP framing can be used for any underlying transport
   protocol with bytestream semantics (SOCK_STREAM) such as SDP or UDT.

   64-bit size field may seem excessive, especially in the case of huge
   load of small messages.  However, experiments with optional
   shortening of size to 8 bits (use 8-bit size, escape to 64-bit size
   if messages size is over 254 bytes) have shown that for large
   messages the portion of the message consumed by size itself is so low
   that it has no measurable effect on the performance.  For small
   messages, on the other hand, the throughput is CPU-bound --
   especially when taking into consideration that there's per-message
   work to be done on upper layers as well -- and additional bandwidth
   required by 64-bit size field has thus no impact on the performance.
   Moreover, using this kind of 8-or-64-bit size field results in
   variable length of message headers which are more complex and
   possibly slower to parse and manipulate.

4.2.  SCTP

   SCTP fullfils all the framing requirements as defined by this
   document.  Thus, SP/SCTP framing layer requires no additional
   functionality.  In other words upper layers of SP can be built
   directly on top of SCTP.

   One issue to keep in mind is that SCTP partial delivery feature
   breaks the message atomicity requirement and thus SP/SCTP
   implementations should either avoid using it or ensure that the



Sustrik                 Expires February 18, 2012               [Page 5]

Internet-Draft                 SP Framing                    August 2011


   incomplete messages are dropped and not passed to the upper layers.
   The latter option is an optimisation.  Choosing the former or the
   latter is an implementation detail and has no effect on the wire-
   level protocol.

4.3.  UDP multicast

   The framing for UDP multicast makes couple of assumptions: First, the
   messages transfers are assumed to happen on a single LAN, no multi-
   hop multicast is considered.  Second, we assume that there's only one
   sender per multicast group and UDP port on the LAN.  Finally, we
   assume that MTU of the LAN is known in advance and we propose no
   mechanism for MTU discovery.

   SP messages are encoded as netstrings on top of UDP multicast.  They
   consist of unsigned 64-bit integer in network byte order, which
   determines the size of the following data.  The opaque data follow
   directly after the size field.

      +------------------+----------------------+
      |  size  (64 bits) |         data         |
      +------------------+----------------------+

   The stream of these messages is then segmented to fit into UDP
   packets.  To ensure optimal throughput, the sending side should try
   to fill the packets up to the MTU rather leaving them half-empty.

                                 |
       +------+--------------+---|---+-----------+
       | size |     data     | si|ze |    data   |
       +------+--------------+---|---+-----------+
                                 |
                 packet 1        |    packet 2

   Each packet is then prefixed by a header consisting of 32-bit
   unsigned integer in network byte order representing sequence number
   followed by 16-bit unsigned integer in network byte order
   representing the offset of the first message in the packet.

   Sender should start generating sequence numbers from zero.  Sequence
   number should be incremented by one for each subsequent packet.  When
   2^32-1 is reached, sequence number overflows to zero.

   Using this algorithm we ensure that restarting of the sender doesn't
   generate a sequence number that accidentally fits into the sequence
   generated by the previous instance of the sender, unless sequence
   number overflows and sender rastarts at the same moment.




Sustrik                 Expires February 18, 2012               [Page 6]

Internet-Draft                 SP Framing                    August 2011


   Sender should also fill the 'offset' field in the packet header by
   the offset of the first message beginning in the packet.  If message
   beggining coincides with the beginning of the packet it should be
   zero, etc.  If there's no message beginning in the packet (packet
   contains just a middle part of a larger message) the offset field
   should be set to 0xffff.

       +----------+---------------+------+--------------+----+
       | seqnum=0 | offset=0x0000 | size |     data     | si |
       +----------+---------------+------+--------------+----+

       +----------+---------------+----+--------------+------+--------+
       | seqnum=1 | offset=0x0018 | ze |     data     | size |     da |
       +----------+---------------+----+--------------+------+--------+
                          |                           ^
                          +---------------------------+

       +----------+---------------+--------------+
       | seqnum=2 | offset=0xffff | ta           |
       +----------+---------------+--------------+

   Receiving application should check sequence numbers and if unexpected
   sequence number arrives it should drop any half-received message
   being processed, thus ensuring message atomicity.  Further, it should
   start receiving new message from the newly arrived packet.  To find
   the beginning of the message in the packet it should use 'offset'
   field in the packet header.

   While the above algorithm is not meant to provide reliable multicast,
   random reordering of packets by the network can cause unnecessary
   message loss.  To improve reliability, receivers may implement small
   packet reordering buffer to correct packet sequences.  For example,
   message sequence 0, 2, 1, 3 would cause message loss on each packet
   boundary, while a simple two packet reordering buffer would ensure no
   message loss.
















Sustrik                 Expires February 18, 2012               [Page 7]

Internet-Draft                 SP Framing                    August 2011


5.  IANA Considerations

   This memo includes no request to IANA.
















































Sustrik                 Expires February 18, 2012               [Page 8]

Internet-Draft                 SP Framing                    August 2011


6.  Security Considerations

   TODO
















































Sustrik                 Expires February 18, 2012               [Page 9]

Internet-Draft                 SP Framing                    August 2011


Author's Address

   Martin Sustrik (editor)
   Stropkovska 9
   Bratislava  82103
   Slovakia

   Phone: +421 908 714 885
   Email: sustrik@250bpm.com










































Sustrik                 Expires February 18, 2012              [Page 10]

Internet-Draft                 SP Framing                    August 2011


Full Copyright Statement

   Copyright (C) The IETF Trust (2011).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.











Sustrik                 Expires February 18, 2012              [Page 11]

