


Internet Engineering Task Force                          M. Sustrik, Ed.
Internet-Draft                                            August 7, 2011
Intended status: Informational
Expires: February 8, 2012


               Background for Scalability Layer/Protocol
                     draft-sustrik-spbackground-01

Abstract

   TODO

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 8, 2012.




















Sustrik                 Expires February 8, 2012                [Page 1]

Internet-Draft                SP Background                  August 2011


1.  Introduction

   The world of Internet is moving in a very specific direction.  As
   clients are almost constantly online, the need for client-side
   software diminishes.  Thin client becomes the norm.  Users are happy
   to lose the control of their data and software just to get rid of the
   need for administration.  Service providers, on the other hand, are
   happy to trade thick clients for extremely low time-to-market
   provided by application executed in the browser, with client-side
   code downloaded just in time from the server.

   In short, the world looks more and more like a collection of
   centralised services, each forming its own star-like topology,
   service provider being in the middle and thin clients on the edges.

   This trend is further amplified by the fact that no two services are
   exactly the same.  There's not much point in designing public
   protocols to allow distribution of a service that's provided by a
   single provider or maybe a handful of providers at best.

   IETF already reflects this trend.  As "Web Applications: Trends and
   Implications" [1] Internet draft says: "In a nutshell, there is a
   certain class of applications for which the standardization need is
   diminishing: chances are good that your standardization work will not
   be relevant in such an environment."

   However, there's a different trend emerging behind the scenes.
   There's an increased need for services to use other services.  It
   often makes sense to offload a specific functionality to an online
   service and focus on what you are good at instead of competing with
   existing service providers in the functionality you are not expert at
   and which you are probably not even interested in.  Even more
   importantly, by using other services you can reach the users centered
   around those services, which in turn means getting a traction far
   more quickly than you would get marketing the product in the old-
   fashioned way.  Finally, automated access to services allows for
   combining multiple services in an innovative way to deliver added
   value to the user.

   All these trends are already visible in the online world: software-
   as-a-service paradigm, delivering applications via social networking
   sites, just-in-time serving of ads provided by external companies,
   mashups, migrating data between different online services etc.

   Given that services using other services require much more precise
   contract than human beings who are generally all right with loosely
   defined "graphical user interface", these new trends lead to re-
   emergence of protocols, although in a slightly mutated manner.



Sustrik                 Expires February 8, 2012                [Page 2]

Internet-Draft                SP Background                  August 2011


   Online services already provide "APIs" for developers to hook in.
   Unfortunately, these are entirely ad hoc.  The same functionality is
   re-invented and re-implemented over and over again.  The APIs tend to
   be buggy and insecure.  The interactions with underlying network is
   almost universally ignored.

   Thus, it seems there's a need for standardised application-level
   protocols here, however, not the classic application protocols that
   convey business logic -- the business logic is different for each
   service anyway -- but protocols to handle pieces of functionality
   that are common to large number of services.

   Such functionality invariably has to deal with the most low-level
   aspects of the application protocols, namely abstraction of the
   underlying network and interaction with it as well as the generic
   communication patterns between services.

   This memo provides a background, both historic and technical, and a
   rationale for such a layer and discusses some of the associated use
   cases.































Sustrik                 Expires February 8, 2012                [Page 3]

Internet-Draft                SP Background                  August 2011


2.  History

   Historically, there are two large trends in designing the generic
   "middleware" layer to exist between netowrking stack and the
   applications.

   First, there is a tradition of "message-oriented middleware" or
   "enterprise messaging" if you like.  It starts in 80's when gradual
   transition from mainframes to PCs triggered the first generation of
   messaging systems.

   The enterprise nature of these system gave rise to their two main
   traits: extensive featureset and assumption of central control.

   By the start of new millenia messaging middleware have accumulated
   large set of disparate functionality, ranging from data serialisation
   and persistence (storing message queues in a database) to complex
   message filtering algorithms, wide range of security techniques,
   different routing algorithms, data transformation services,
   distributed transactions, sophisticated tools for governance and
   monitoring, enterprise application integration and so on.

   All the above is further done with the assumption that the whole
   system is deployed by a single entity (company) and that it is
   completely under control of its administrators.  Consequently,
   there's little focus on providing reliability and robustness needed
   in loosely coupled, multi-tenant and often malicious Internet
   environment.

   Traditionally, the market have been dominated by proprietary products
   such as TIBCO's RendezVous, IBM's WebSphereMQ.  However, early 90's
   witness the attempts to standardise the middleware layer.  They bring
   object-orientedness to the design and result in standards such as
   CORBA (1991) and Microsoft's COM (1992).  While these standards were
   widely used they haven't replaced the traditional business messaging
   solutions, rather they created a niche of their own.

   Standardisation of traditional message-oriented middleware began in
   2001 with JMS standard describing Java APIs to access messaging
   functionaliy.  In 2006, a standrd wire-level protocol for enterprise
   messaging, AMQP, was published.

   In parallel, HPC industry have developed standards of their own.  MPI
   (1994) is a de facto API standard for communication between
   applications running on supercomputers and computational clusters.
   The basic principles are similar to enterprise messaging, most
   importantly the assumption of cetralised and fully controled
   environment.



Sustrik                 Expires February 8, 2012                [Page 4]

Internet-Draft                SP Background                  August 2011


   The second big trend arises from the need to use software services
   over the Internet, specifically to use world-wide web as a
   application-to-application messaging platform rather than a way to
   deliver documents and GUIs to the end users.

   When compared to the enterprise messaging, the web services
   infrastructure tends to be more leight-weight on functionality while
   it focuses more on features such as addressing and discovery, that
   are crucial in loosely coupled distributed environment with no
   central authority.

   TODO: History of SOAP, WS etc.

   On more theoretical level, SOA (service-oriented architecture) is
   much promoted since beginning of the century as a way to think about
   distributed computing as a set of coarse-grained interoperable
   services that can be quickly composed into novel applications.

   REST architecture (2000), on the other hand, focuses on the concept
   of "resource" living on the network while distributed computing takes
   the form of accessing and manipulating the resource.






























Sustrik                 Expires February 8, 2012                [Page 5]

Internet-Draft                SP Background                  August 2011


3.  IANA Considerations

   This memo includes no request to IANA.
















































Sustrik                 Expires February 8, 2012                [Page 6]

Internet-Draft                SP Background                  August 2011


4.  Security Considerations

   This memo has no security considerations.
















































Sustrik                 Expires February 8, 2012                [Page 7]

Internet-Draft                SP Background                  August 2011


Author's Address

   Martin Sustrik (editor)
   Stropkovska 9
   Bratislava  82103
   Slovakia

   Phone: +421 908 714 885
   Email: sustrik@250bpm.com










































Sustrik                 Expires February 8, 2012                [Page 8]

Internet-Draft                SP Background                  August 2011


Full Copyright Statement

   Copyright (C) The IETF Trust (2011).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.











Sustrik                 Expires February 8, 2012                [Page 9]

